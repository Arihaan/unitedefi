This diagram main-flow.png provides a detailed **sequence flow** of how the **Fusion+** swap protocol works for a cross-chain token swap — in this case, **Ethereum (ETH)** to **Solana (SOL)** or any SPL token — involving several components such as the **Maker**, **Taker**, the **Fusion Swap Program**, and multiple token accounts for escrow and fees. Here’s a step-by-step explanation of what’s happening:

---

### **Actors and Entities:**

* **Maker**: User who initiates a swap offer.
* **Taker**: User who fills the swap offer.
* **Fusion Swap Program**: On-chain Solana program that manages order logic and escrow.
* **Escrow Token Account**: Temporary holding account for source tokens.
* **Protocol Fee Token Account**: Account to collect protocol-level fees.
* **Integrator Fee Token Account**: Account to collect fees for third-party integrators (e.g., aggregators or dApps).

---

## ✅ Swap Lifecycle Detailed

---

### **1. Order Creation by Maker**

* `create()` is called by the Maker.
* The **Fusion Swap Program**:

  * **Validates the order** (ensures format, values, supported tokens).
  * **Transfers source tokens** (from the Maker to a newly created escrow account).
  * **Creates escrow token account** and deposits those tokens.
  * Returns control to the Maker.

---

### **2. Order Fill by Taker**

* Taker invokes `fill()`.
* The **Fusion Swap Program**:

  * **Validates the order** again.
  * **Calculates destination token amounts** based on pricing and slippage.

---

### **3. Fill Execution (Core Swap Logic)**

* **Fill execution** begins:

  * **Transfers source tokens** from the Taker to the Maker (via Fusion Program).
  * If a **protocol fee** exists:

    * Sends a portion of tokens to the **Protocol Fee Token Account**.
  * If an **integrator fee** exists:

    * Sends a portion to the **Integrator Fee Token Account**.

#### ✅ Destination Types:

* **If the destination is native SOL**:

  * Transfers SOL directly.
* **If the destination is SPL Token**:

  * Transfers SPL tokens accordingly.

---

### **4. Finalization: Escrow Closure**

* If **all tokens have been filled**, the **Escrow Token Account** is closed.
* Remaining SOL (if any) is sent back or burned, and the account is cleared from the chain to save space and fees.

---

### **5. Order Cancellation (Optional)**

#### By Maker:

* The Maker can call `cancel()`:

  * **Returns remaining tokens** from escrow.
  * **Closes the escrow account**.

#### By Resolver:

* If the swap involves a third-party resolver (e.g., automated refund or failure scenario), `cancelByResolver()` is invoked:

  * **Returns remaining tokens**.
  * **Closes the escrow**.
  * If there is a **cancellation premium**, it charges a fee to the Taker in **SOL**.

---

## 🔁 Conditional Logic (alt blocks in UML):

* `[Protocol fee exists]` and `[Integrator fee exists]` are **optional** paths, executed only if fee amounts > 0.
* `[Native SOL as destination]` or `[SPL Token as destination]` determines the path for final asset delivery.
* `[All tokens filled]` is a condition for final closure of the escrow account.
* `[If cancellation premium > 0]` ensures penalty is only taken when applicable.

---

## ✅ Summary of Token Flows:

| From           | To                       | Reason                            |
| -------------- | ------------------------ | --------------------------------- |
| Maker          | Escrow Token Account     | Supply tokens for the swap        |
| Taker          | Fusion Program           | Supplies destination tokens       |
| Fusion Program | Maker                    | Sends destination tokens to Maker |
| Fusion Program | Protocol Fee Account     | If protocol fee is due            |
| Fusion Program | Integrator Fee Account   | If integrator fee is due          |
| Fusion Program | Escrow closed (to Maker) | On cancellation or full fill      |

---
